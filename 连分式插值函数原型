//连分式插值
//有一个bug未解决，不能输出第二组数的原因

#include "pch.h"
#include <iostream>
#include<cmath>
using namespace std;
void funpqj(double x[], double y[], double b[], int j)
{
	int k, flag = 0;
	double u;
	u = y[j];
	for (k = 0; (k < j) && (flag == 0); k++)
	{
		if ((u - b[k]) + 1.0 == 1.0) flag = 1;
		else
			u = (x[j] - x[k]) / (u - b[k]);

	}
	if (flag == 1)  u = 1.0e+35;
	b[j] = u;
	return;
}
double funpqv(double x[], double b[], int n, double t)
{
	int k;
	double u;
	u = b[n];
	for (k = n - 1; k >= 0; k--)
	{
		if (fabs(u) + 1.0 == 1.0)
			u = 1.0e+35*(t - x[k]) / fabs(t - x[k]);
		else
			u = b[k] + (t - x[k]) / u;
	}
	return(u);
}
double funpq(double x[], double y[], int n, double eps, double t)
{
	int i, j, k, l, m;
	double p, q, u;
	double b[8], xx[8], yy[8];
	p = 0.0;
	if (n < 1) return(p);
	if (n == 1) {
		p = y[0];
		return(p);
	}
	m = 8;
	if (m > n) m = n;
	if (t <= x[0]) k = 1;
	else if (t >= x[n - 1]) k = n;
	else
	{
		k = 1;
		j = n;
		while ((k - j != 1) && (k - j != -1))
		{
			l = (k + j) / 2;
			if (t < x[l - 1])  j = l;
			else k = 1;

		}
		if (fabs(t - x[l - 1]) > fabs(t - x[j - 1])) k = j;

	}
	j = 1;
	l = 0;
	for (i = 1; i <= m; i++)
	{
		k=k+j * l;
		if ((k < 1) || (k > n))
		{
			l=l+1;
			j = -j;
			k =k+ j *l;

		}
		xx[i - 1] = x[k - 1];
		yy[i - 1] = y[k - 1];
		l =l+ 1;
		j = -j;

	}
	j = 0; b[0] = yy[0]; p = b[0];
	u = 1.0 + eps;
	while ((j < m - 1) && (u >= eps))
	{
		j=j+1;
		funpqj(xx, yy, b, j);
		q = funpqv(xx, b, j, t);
		u = (fabs(q - p));
		p = q;
	}
	return(p);
}
int main()
{
	double t, z;
	double x[10] = { -1.0,-0.8,-0.65,-0.4,-0.3,0.0,0.2,0.45,0.8,1.0 };
	double y[10] = { 0.0384615,0.0588236,0.0864865,0.2,0.307692,1.0,0.5,0.164948,0.0588236,0.0384615 };
	t = -0.85;	z = funpq(x, y, 10, 0.0000001, t);
	cout << "t=" << t << "    z=" << z << endl;

	t = 0.25;	z = funpq(x, y, 10, 0.0000001, t);      //0.25这个值出现了bug
    cout << "t=" << t << "z=" << z << endl;
	return 0;

}
